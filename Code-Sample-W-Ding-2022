#!/usr/bin/env python
# Read eigenvectors from Phonopy
# 2020.08, dwj
# 2020.12, modified for considering real atomic displacements sqrt( h / (2*m_u*w_qv) )

import yaml
import vasp_dwj as vasp
import numpy as np
import math

def main():
    
    scale = 1			# scale down the atomic displacements, 100% - no scale down;

    pi = math.pi
    h    = 6.626        	# (10^-34) J*s, Planck Constant
    h_1	 = 4.136		# planck const in eV*s (10^-15)
    c_ma = 1.661		# (10^-27) kg,  atom mass constant
    c_eV = 1.602		# 1 eV = 1.602*(10^-19) J

# Test code 1:    
    mass    = 50.0		# atom mass in units of c_ma (AMU)
    mass_kg = mass * c_ma	# 10^-27 kg
    f = 5			# phonon frequency (not angular) in units of THz, 10^12 s^-1
    w = f * (2*pi)
    h_bar = h/(2*pi)
    A = math.sqrt(10* h_bar/(2*mass_kg*w)) 		# in unit of Angstrom
    print "Test, benchmark 1:"
    print "atom mass = %.1f (AMU),\t phonon frequency = %.1f (THz, not angular)"%(mass, f)
    print "A = %.5f Angstrom\n"%A

# Test code 2:    
    mass = 50.0						# atom mass in units of c_ma          
    mass_kg = mass * c_ma
    E = 30.0						# phonon frequency in meV 
    h_1_bar = h_1/(2*pi)
    w = E/1000 / h_1_bar * 1000 			# ph-frequency (angular) in THz
    f = w/(2*pi)
    h_bar = h/(2*pi)
    A = math.sqrt(10* h_bar/(2*mass_kg*w)) 		# in unit of Angstrom
    print "Test, benchmark 2:"
    print "atom mass = %.1f (AMU),\t phonon frequency = %.1f (meV), = %.1f (THz, not angular)"%(mass, E, f)
    print "A = %.5f Angstrom\n"%A

# Main code
    stream = open("band.yaml", 'r')
    data = yaml.safe_load(stream)
    nbands = 12		# 12 phonon bands
    natom  = 4		# 4 atoms 

    [title, lc, axis, natoms, atomlabels, pos_list, pos_array] = vasp.read_poscar('POSCAR')
    a = axis[0][0]
    b = axis[1][1]
    c = axis[2][2]

    nq = 0		# Gamma point
    freq = []		# save phonon frequencies
    eig_vec = [] 	# save eigenvectors
    atom_ms = []        # save atomic mass (in the unit of atom mass constant)
    pos = []

    for na in range(natom):
        atom_ms.append(data['points'][na]['mass']) 
	pos.append(data['points'][na]['coordinates'])
    print "Atom mass = (in atomic weight unit)", atom_ms
    print "Atom coordinates of original structure:"
    for i in range(natom):
        print i+1, pos[i]

    for i in range(nbands):
    	freq.append(data['phonon'][nq]['band'][i]['frequency']) 	# nq = 0, Gamma point
	eig_vec.append(data['phonon'][nq]['band'][i]['eigenvector'])

    freq_thz = np.array(freq)  						# Phonon frequency (not angular) in THz
    freq_meV = freq_thz * h_1						# convert to meV	
    print "Frequencies of phonon modes at Gamma:\n Phonon modes\t THz, \t meV"
    for i in range(len(freq_thz)):
        print "%d\t\t %.2f,\t %.2f"%(i+1, freq_thz[i], freq_meV[i])

    u_atom_w = [] 	# atomic displacement for each atom at each phonon frequencies.
    for nb in range(nbands):
        s=[]        
        w = freq_thz[nb] * (2*pi)					# Phonon frequency in THz (angular)
	for na in range(natom):
	    mass = atom_ms[na] 
	    mass_kg = mass * c_ma
	    if w <= 0.01: A = 0
	    else:  A = math.sqrt(10*h_bar/(2*mass_kg*w)) 		# Phonon amplitude in Angstrom
	    s.append(round(A,5))
        u_atom_w.append(s)
    print "Atom displacement Amplitude: in Angstrom"
    for i in range(len(u_atom_w)):
        for j in range(len(u_atom_w[i])):
            print round(u_atom_w[i][j],4),
        print ""

## calculate the atomic displacements from eigenvectors and atom masses;
    disp_cord = []			# displacements in A
    disp_frac = []			# displacements in fractional coordinates
    for nb in range(len(eig_vec)):
        disp_tmp = []			# temporary displacements in A
        disp_tmp1 = []			# temporary displacements in frac
	print "phonon band:", nb+1
    	for na in range(len(eig_vec[nb])):
	    A = u_atom_w[nb][na] * scale
     	    x = eig_vec[nb][na][0][0] * A
    	    y = eig_vec[nb][na][1][0] * A
    	    z = eig_vec[nb][na][2][0] * A
	    mod_dis = math.sqrt(x*x + y*y + z*z)
	    disp_tmp.append([x, y, z])
	    print "atom: ", na+1,
	    print "displacements (in A): %.5f, %.5f, %.5f, \tmod_dis = %.5f (AA)"%(x, y, z, mod_dis)
    	for na in range(len(eig_vec[nb])):
	    A = u_atom_w[nb][na] * scale
     	    x = eig_vec[nb][na][0][0] * A / lc / a
    	    y = eig_vec[nb][na][1][0] * A / lc / b
    	    z = eig_vec[nb][na][2][0] * A / lc / c
	    disp_tmp1.append([x, y, z])
	    print "atom: ", na+1,
	    print "displacements (in frac): %.5f, %.5f, %.5f"%(x, y, z)
	disp_cord.append(disp_tmp)
	disp_frac.append(disp_tmp1)
    	for na in range(len(eig_vec[nb])):
	    A = u_atom_w[nb][na] * scale
	    print "atom: ", na+1,
	    x = eig_vec[nb][na][0][0]
	    y = eig_vec[nb][na][1][0]
	    z = eig_vec[nb][na][2][0]
	    mod_eig = math.sqrt(x*x + y*y + z*z)
	    mod_disA = mod_eig * A
	    print "eigenvector: %.5f, %.5f, %.5f, \t mod_eig =  %.5f,\t mod_disA = %.5f (AA)"%(x, y, z, mod_eig, mod_disA)
	print ""
	
    for i in range(nbands):
        filename = 'POSCAR_' + str(i+1)
	poscar =  pos_array + np.array(disp_frac[i])
        vasp.write_poscar(filename, title, lc, axis, natoms, atomlabels, poscar, [0,])

main()
